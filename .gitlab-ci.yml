stages:
  - clone
  - test
  - deploy

node_testing:
  stage: test
  image: node:18
  tags:
    - dsa
    - DIND
  script:
    - git config --global --add safe.directory /builds/infor-design/ids-legacy
    - npm ci
    - echo "$GITHUB_CONTEXT"
    - echo "$JOB_CONTEXT"

install_packages:
  stage: deploy
  image: node:18
  tags:
    - dsa
    - DIND
  script: |
    git config --global --add safe.directory /builds/infor-design/ids-legacy

    DEMO_PACKAGE_JSON_FILE=./app/package.json

    if test -f "$DEMO_PACKAGE_JSON_FILE"; then
      cp -fr $DEMO_PACKAGE_JSON_FILE ./package.json && rm -fr ./package-lock.json
      npm install
      git checkout package.json package-lock.json
    else
      npm install
    fi

    ls -al

    npm run build
    npm run build:demoapp


create_docker_file:
  stage: deploy
  needs:
    - install_packages
  image: ubuntu:latest
  tags:
    - dsa
    - DIND
  script: |
    echo "FROM hookandloop/sohoxi-demo:1.0.1" > Dockerfile
    echo "ADD ./ /controls" >> Dockerfile
    echo "ADD ./dist /www/data/artifacts" >> Dockerfile
    echo "ADD ./docs /www/data/docs" >> Dockerfile
    echo "RUN chown -R www-data.www-data /www/data" >> Dockerfile
    ls -al
  variables:
    GIT_STRATEGY: fetch
    GIT_CLEAN_FLAGS: "-xdfq --exclude=app/dist/ --exclude=dist/ --exclude=node_modules/ --exclude=src/components/*/theme-*.html --exclude=temp/"

build_image:
  stage: deploy
  needs:
    - create_docker_file
  image: docker:25
  services:
    - name: docker:25-dind
      alias: host
  tags:
    - dsa
    - DIND
  script: |
    echo "branch=$(echo ${CI_COMMIT_REF_NAME})"
    docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
    ls -al
  variables:
    DOCKER_HOST: tcp://host:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    GIT_STRATEGY: fetch
    GIT_CLEAN_FLAGS: "-xdfq --exclude=app/dist/ --exclude=dist/ --exclude=node_modules/ --exclude=src/components/*/theme-*.html --exclude=temp --exclude=Dockerfile"

clone_deployments_repo:
  stage: clone
  image: ubuntu:latest
  tags:
    - dsa
    - DIND
  before_script:
    - echo "$SSH_PRIVATE_KEY_DEPLOYMENTS" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script: |
    apt-get update
    apt-get install -y git
    git clone ssh://git@oxfordssh.awsdev.infor.com:7999/infor-design/deployments.git deployments
    ls -al
  variables:
    GIT_STRATEGY: none
