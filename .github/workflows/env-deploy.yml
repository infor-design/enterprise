# Checks if a branch is a candidate for environment deployment,
# start an Argo Workflow and waits for it to finish.
# The run-workflow.sh script will exit with a 0 or 1.

name: Environment deploy

on:
  push:
    branches:
      - "*"
      - "*/*"
      - "**"

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: node_modules
          key: enterprise-1023

      - uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "America/New_York"
          timezoneMacos: "America/New_York"
          timezoneWindows: "America/New_York"

      - name: Check Memory Limit
        run: node -e 'console.log(v8.getHeapStatistics().heap_size_limit/(1024*1024))'

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Setup timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: America/New_York

      - name: Extract branch name
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch_name

      - name: Extract repo name
        shell: bash
        run: |
          echo "##[set-output name=repo_name;]$(echo ${GITHUB_REPOSITORY#*/})"
        id: extract_repo_name

      - name: Extract repo owner
        shell: bash
        run: |
          echo "##[set-output name=repo_owner;]$(echo ${GITHUB_REPOSITORY%/*})"
        id: extract_repo_owner

      - name: Deploy flag
        id: deploy_flag
        run: |
          branch_name=${{ steps.extract_branch_name.outputs.branch }}
          FLAG=false

          if [[ "$branch_name" =~ ^dev-(.*)$ ]]
          then
            echo "deploying dev branch..."
            FLAG=true
          fi

          if [[ "$branch_name" =~ ^qa-(.*)$ ]]
          then
            echo "deploying qa branch..."
            FLAG=true
          fi

          if [[ "$branch_name" =~ ^staging-(.*)$ ]]
          then
            echo "deploying staging branch..."
            FLAG=true
          fi

          if [[ "$branch_name" = "main" ]]
          then
            echo "deploying main..."
            FLAG=true
          fi

          if [[ "$branch_name" =~ ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$ ]]
          then
            echo "deploying a semantic version branch..."
            FLAG=true
          fi

          echo "::set-output name=FLAG::$FLAG"
      - name: Run env deployment
        if: steps.deploy_flag.outputs.FLAG == 'true'
        run: |
          branch_name=${{ steps.extract_branch_name.outputs.branch }}
          repo_name=${{ steps.extract_repo_name.outputs.repo_name }}
          repo_owner=${{ steps.extract_repo_owner.outputs.repo_owner }}
          site="prod"

          case $branch_name in
            *"dev"*)
              site="dev"
              ;;

            *"staging"*)
              site="staging"
              ;;
          esac

          echo "Deploying ${repo_owner//./_}/${repo_name//./_} ${branch_name//./_}"
          chmod +x ./scripts/deploy-environment/run-workflow.sh
          image_version=$(node -p "require('./package.json').version")

          ./scripts/deploy-environment/run-workflow.sh \
            -u https://argocd.workers.design.infor.com/api \
            -o hookandloop \
            -c enterprise \
            -f ${branch_name} \
            -n ${branch_name//./} \
            -i ${image_version} \
            -a ${repo_owner}/${repo_name} \
            -m infor-design/apps \
            -s ${site}
        env:
          AWF_AUTH_TOKEN: ${{ secrets.AWF_AUTH_TOKEN }}
          AWF_NAME: ${{ secrets.AWF_NAME }}
        shell: bash

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
